<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <title>MuseoConnect - Admin - Reports</title>
    <meta content="" name="description">
    <meta content="" name="keywords">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700" rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="assets/vendor/animate.css/animate.min.css" rel="stylesheet">
    <link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="assets/vendor/swiper/swiper-bundle.min.css" rel="stylesheet">
    <link href="images/MuseoDeLaSalle.png" type="image/jpeg" rel="icon">

    <!-- Template Main CSS File -->
    <link href="assets/css/style.css" rel="stylesheet">

</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-default navbar-trans navbar-expand-lg fixed-top">
        <div class="container">
            <button class="navbar-toggler collapsed" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarDefault" aria-controls="navbarDefault" aria-expanded="false"
                aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            <a class="navbar-brand text-brand" href="/loggedInindex">Museo<span class="color-b">Connect </span>ADMIN</a>

            <div class="navbar-collapse collapse justify-content-center" id="navbarDefault">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadmin">Users</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadminreservation">Reservations</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadminblocked">Blocked</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadminartifacts">Artifacts</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/loggedInadminreports">Reports</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/loggedInadminquestions">Games</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/logout">Log Out</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav><!-- End Header/Navbar -->

    <main id="main">

        <!-- Report Generation -->
        <section class="intro-single">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 col-lg-8">
                        <div class="title-single-box d-flex align-items-center">
                            <img src="images/reports.png" alt="Image" class="img-fluid"
                                style="max-width: 100px; max-height: 100px;">
                            <h1 class="title-single">Reports</h1>
                        </div>
                        <br>
                        <button onclick="printAllCharts()" id="printAllChartsButton">Print All Charts</button>
                    </div>

                    <div class="col-md-6 my-3">
                        <h2>User Type Distribution</h2>
                        <canvas id="userTypeChart" width="400" height="400"></canvas>
                        <button onclick="printUserTypeChart()" id="printUserTypeChartButton">Print User Type
                            Chart</button>
                    </div>

                    <!-- User Score Distribution Chart Container -->
                    <div class="col-md-6 my-3">
                        <h2>User Score Distribution</h2>
                        <canvas id="userScoreChart" width="400" height="400"></canvas>
                        <button onclick="printUserScoreChart()" id="printUserScoreChartButton">Print User Score
                            Chart</button>
                    </div>

                    <!-- Monthly Reservation Count Line Chart Container -->
                    <div class="col-md-6 my-3">
                        <h2>Monthly Reservation Counts</h2>

                        <label for="startMonth">Start Month:</label>
                        <input type="month" id="startMonth" name="startMonth">

                        <label for="endMonth">End Month:</label>
                        <input type="month" id="endMonth" name="endMonth">

                        <button class="my-3" id="updateMonthlyChartBtn">Update Chart</button>

                        <canvas id="monthlyReservationCountChart" width="400" height="400"></canvas>
                        <button onclick="printMonthlyReservationChart()" id="printMonthlyReservationChartButton">Print
                            Monthly Reservation Chart</button>
                    </div>

                    <!-- Visitor count per month HTML body -->
                    <div class="col-md-6 my-3">
                        <h2>Monthly number of visitors per reservation</h2>

                        <label for="startMonth">Start Month:</label>
                        <input type="month" id="startMonthVisitor" name="startMonth">

                        <label for="endMonth">End Month:</label>
                        <input type="month" id="endMonthVisitor" name="endMonth">

                        <button class="my-3" id="updateMonthlyVistorBtn">Update Chart</button>

                        <canvas id="visitorCountChart" width="400" height="400"></canvas>
                        <button onclick="printMonthlyVisitorChart()" id="printMonthlyVisitorsChartButton">Print Monthly
                            Visitors Chart</button>
                    </div>

                    <!-- Blocked dates by week -->
                    <div class="col-md-6 my-3">
                        <h2>Blocked Dates by Week</h2>

                        <label for="startMonth">Start Month:</label>
                        <input type="month" id="startMonthBlocked" name="startMonth">

                        <label for="endMonth">End Month:</label>
                        <input type="month" id="endMontBlocked" name="endMonth">

                        <button class="my-3" id="updateBlockedBtn">Update Chart</button>

                        <canvas id="blockedDatesByMonthChart" width="400" height="400"></canvas>
                        <button onclick="printBlockDateChart()" id="printBlockDateChartButton">Print Blocked Dates
                            Chart</button>
                    </div>

                    <!-- Artifacts by Type -->
                    <div class="col-md-6 my-3">
                        <h2>Artifacts by Type</h2>
                        <canvas id="artifactsByTypeChart" width="400" height="400"></canvas>
                        <button onclick="printArtifactsChart()" id="printArtifactsChartButton">Print Artifacts
                            Chart</button>
                    </div>

                    <!-- Gender Distribution -->
                    <div class="col-md-6 my-3">
                        <h2>Gender Distribution</h2>
                        <canvas id="genderDistributionChart" width="400" height="400"></canvas>
                        <button onclick="printGenderDistributionChart()" id="printGenderDistributionChartButton">Print
                            Gender Distribution Chart</button>
                    </div>

                </div>

            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-12">

                    <div class="copyright-footer">
                        <p class="copyright color-text-a">
                            <span class="color-a"> Â© All Rights Reserved 2023, Fergus Ampuan, Rasheed Taban, Lemuel
                                Palgan
                        </p>
                        <% if (admin && admin.name && admin.type==="admin" ) { %>
                            <p hidden>Welcome, <%= admin.name %>
                            </p>
                            <% } else { %>
                                <p hidden>User is not logged in</p>
                                <script>
                                    // Redirect to the logout route when user.name is empty
                                    window.location.href = "/logout";
                                </script>
                                <% } %>
                    </div>
                </div>
            </div>
        </div>
    </footer><!-- End  Footer -->

    <div id="preloader"></div>
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
            class="bi bi-arrow-up-short"></i></a>

    <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="assets/vendor/swiper/swiper-bundle.min.js"></script>
    <script src="assets/vendor/php-email-form/validate.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.js"
        integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- <script src="/js/admin.js"></script> -->
    <script src="/js/index.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get user data from your server-side rendering (Assuming you've already passed 'users' and 'reservations' from your route)
            const usersJSON = '<%- JSON.stringify(users) %>';
            const reservationsJSON = '<%- JSON.stringify(reservations) %>';
            const blockedJSON = '<%- JSON.stringify(blocked) %>';
            const artifactsJSON = '<%- JSON.stringify(artifacts) %>';
            const users = JSON.parse(usersJSON);
            const reservations = JSON.parse(reservationsJSON);
            const blocked = JSON.parse(blockedJSON);
            const artifacts = JSON.parse(artifactsJSON);

            // Initialize an array to store user scores
            const userScoreData = Array(10).fill(0);
            const userTypeData = {};

            // Extract data for charts
            users.forEach((user) => {
                // User Type Distribution
                const userType = user.type;
                userTypeData[userType] = (userTypeData[userType] || 0) + 1;

                // User Score Distribution
                const userScore = user.score;
                if (userScore !== undefined) {
                    const score = parseInt(userScore);
                    if (score >= 1 && score <= 10) {
                        userScoreData[score - 1] += 1;
                    }
                }
            });

            // Create the pie chart for User Type Distribution
            const userTypeChartCtx = document.getElementById("userTypeChart").getContext("2d");
            const userTypeChart = new Chart(userTypeChartCtx, {
                type: "pie",
                data: {
                    labels: Object.keys(userTypeData),
                    datasets: [
                        {
                            data: Object.values(userTypeData),
                            backgroundColor: [
                                "rgba(255, 99, 132, 0.7)",
                                "rgba(54, 162, 235, 0.7)",
                                "rgba(255, 206, 86, 0.7)",
                                "rgba(75, 192, 192, 0.7)",
                                "rgba(153, 102, 255, 0.7)",
                                "rgba(255, 159, 64, 0.7)",
                                "rgba(0, 128, 0, 0.7)",
                                "rgba(128, 0, 128, 0.7)",
                                // 10 additional colors
                                "rgba(255, 0, 0, 0.7)",
                                "rgba(0, 255, 0, 0.7)",
                                "rgba(0, 0, 255, 0.7)",
                                "rgba(128, 128, 0, 0.7)",
                                "rgba(255, 128, 0, 0.7)",
                                "rgba(128, 0, 255, 0.7)",
                                "rgba(0, 128, 255, 0.7)",
                                "rgba(255, 128, 128, 0.7)",
                                "rgba(128, 255, 0, 0.7)",
                                "rgba(0, 128, 128, 0.7)",
                            ],
                        },
                    ],
                },
            });


            // Create the bar graph for User Score Distribution
            const userScoreChartCtx = document.getElementById("userScoreChart").getContext("2d");
            const userScoreChart = new Chart(userScoreChartCtx, {
                type: "bar",
                data: {
                    labels: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
                    datasets: [
                        {
                            label: "Number of Users",
                            data: userScoreData,
                            backgroundColor: "rgba(75, 192, 192, 0.7)",
                        },
                    ],
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Score",
                            },
                        },
                        y: {
                            title: {
                                display: true,
                                text: "Number of users who got the score",
                            },
                            beginAtZero: true,
                            stepSize: 1,
                            precision: 0,
                        },
                    },
                },
            });

            // Initialize an array to store monthly reservation counts
            const monthlyReservationCounts = getMonthlyReservationCounts(reservations);

            // Prepare the data for the line graph
            const monthlyReservationCountChartCtx = document.getElementById("monthlyReservationCountChart").getContext("2d");
            const monthlyReservationCountChart = new Chart(monthlyReservationCountChartCtx, {
                type: "line",
                data: {
                    labels: Object.keys(monthlyReservationCounts),
                    datasets: [
                        {
                            label: "Monthly Reservation Counts",
                            data: Object.values(monthlyReservationCounts),
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            fill: false
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });

            function getMonthlyReservationCounts(reservations) {
                const monthlyCounts = {};

                reservations.forEach((reservation) => {
                    const visitDate = new Date(reservation.visitDate);
                    const year = visitDate.getFullYear();
                    const month = visitDate.getMonth() + 1; // Months are 0-based

                    const key = `${year}-${month}`;
                    if (monthlyCounts[key]) {
                        monthlyCounts[key]++;
                    } else {
                        monthlyCounts[key] = 1;
                    }

                });
                // console.log(monthlyCounts);
                return monthlyCounts;
            }

            document.getElementById('updateMonthlyChartBtn').addEventListener('click', updateMonthlyReservationCounts);
            // Add this function to your script to update the chart
            function updateMonthlyReservationCounts() {
                // Get the user-inputted start and end months
                const startMonth = document.getElementById('startMonth').value;
                const endMonth = document.getElementById('endMonth').value;

                // Convert start and end months to Date objects
                const startDate = new Date(startMonth + '-01'); // First day of the start month
                const endDate = new Date(endMonth + '-01'); // First day of the month after the end month
                endDate.setMonth(endDate.getMonth() + 1);

                // Swap start and end months if needed
                if (startDate > endDate) {
                    [startMonth, endMonth] = [endMonth, startMonth];
                }

                // Filter the reservations array
                const filteredReservations = reservations.filter((reservation) => {
                    const visitDate = new Date(reservation.visitDate);
                    return visitDate >= startDate && visitDate < endDate;
                });

                // Count reservations by month
                const reservationCounts = {};
                filteredReservations.forEach((reservation) => {
                    const visitDate = new Date(reservation.visitDate);
                    const yearMonth = visitDate.getFullYear() + '-' + (visitDate.getMonth() + 1).toString().padStart(2, '0');
                    reservationCounts[yearMonth] = (reservationCounts[yearMonth] || 0) + 1;
                });

                // Prepare the data for the chart
                const labels = Object.keys(reservationCounts).sort();
                const data = labels.map(label => reservationCounts[label]);

                // Update the chart
                const monthlyReservationCountChart = Chart.getChart("monthlyReservationCountChart"); // Assuming your chart's ID is 'monthlyReservationCountChart'
                monthlyReservationCountChart.data.labels = labels;
                monthlyReservationCountChart.data.datasets[0].data = data;
                monthlyReservationCountChart.update();
            }



            // Create an array to store the visitor count for each month
            const visitorCountPerMonth = new Array(12).fill(0);

            // Function to get visitor count per month in year-month format
            function getVisitorCountPerMonthYearFormat(reservations) {
                const visitorCount = {};

                // Count visitors per month
                reservations.forEach((reservation) => {
                    const visitDate = new Date(reservation.visitDate);
                    const year = visitDate.getFullYear();
                    const month = visitDate.getMonth() + 1; // Months are zero-indexed (0-11), so add 1
                    const yearMonth = `${year}-${month}`;

                    if (visitorCount[yearMonth]) {
                        visitorCount[yearMonth]++;
                    } else {
                        visitorCount[yearMonth] = 1;
                    }
                });
                // console.log(visitorCount)
                return visitorCount;
            }

            document.getElementById('updateMonthlyVistorBtn').addEventListener('click', function () {
                // Get the user-inputted start and end months
                const startMonth = document.getElementById('startMonthVisitor').value;
                const endMonth = document.getElementById('endMonthVisitor').value;

                // Convert start and end months to Date objects
                const startDate = new Date(startMonth + '-01'); // First day of the start month
                const endDate = new Date(endMonth + '-01'); // Last day of the end month
                endDate.setMonth(endDate.getMonth() + 1);

                // Filter the reservations array
                const filteredVisitorCounts = getVisitorCountPerMonthYearFormat(reservations.filter((reservation) => {
                    const visitDate = new Date(reservation.visitDate);
                    return visitDate >= startDate && visitDate < endDate;
                }));

                // Prepare the data for the chart
                const labelsVisitor = Object.keys(filteredVisitorCounts).sort((a, b) => new Date(a) - new Date(b));
                const dataVisitors = labelsVisitor.map(label => filteredVisitorCounts[label]);

                // Update the chart
                const visitorCountChart = Chart.getChart("visitorCountChart");
                visitorCountChart.data.labels = labelsVisitor;
                visitorCountChart.data.datasets[0].data = dataVisitors;
                visitorCountChart.update();
            });


            // Get the visitor count per month in year-month format
            const visitorCountYearMonth = getVisitorCountPerMonthYearFormat(reservations);

            // Sort the labels (year-month) and prepare the data for the chart
            const labelsVisitor = Object.keys(visitorCountYearMonth).sort((a, b) => new Date(a) - new Date(b));
            const dataVisitors = labelsVisitor.map(label => visitorCountYearMonth[label]); // corrected this line

            // Create the bar graph for Visitor Count per Month with new labels
            const visitorCountChartCtx = document.getElementById("visitorCountChart").getContext("2d");
            const visitorCountChart = new Chart(visitorCountChartCtx, {
                type: "bar",
                data: {
                    labels: labelsVisitor,
                    datasets: [
                        {
                            label: "Visitor Count",
                            data: dataVisitors,
                            backgroundColor: "rgba(75, 192, 192, 0.7)",
                        },
                    ],
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Month",
                            },
                        },
                        y: {
                            title: {
                                display: true,
                                text: "Visitor Count",
                            },
                            beginAtZero: true,
                        },
                    },
                },
            });

            // Function to get the start date of the month for a given date
            function getMonthStartDate(date) {
                const d = new Date(date);
                return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-01`; // Format to year-month-01
            }

            // Function to group blocked dates by month
            function groupBlockedDatesByMonth(dates) {
                const blockedDatesByMonth = {};
                dates.forEach((date) => {
                    const monthStart = getMonthStartDate(date);
                    if (blockedDatesByMonth[monthStart]) {
                        blockedDatesByMonth[monthStart]++;
                    } else {
                        blockedDatesByMonth[monthStart] = 1;
                    }
                });
                return blockedDatesByMonth;
            }

            // Assuming `blocked` is an array of objects with a `blockedDate` property
            // e.g., [{ blockedDate: '2023-01-15' }, { blockedDate: '2023-01-20' }]
            const blockedDates = blocked.map((entry) => entry.blockedDate);

            // Process blocked dates and group them by month
            const blockedDatesByMonth = groupBlockedDatesByMonth(blockedDates);

            // Sort the labels (year-month) for the chart
            const labelsBlockedDates = Object.keys(blockedDatesByMonth).sort((a, b) => new Date(a) - new Date(b));

            // Prepare the data for the chart
            const dataBlockedDates = labelsBlockedDates.map(label => blockedDatesByMonth[label]);

            // Chart.js code to create the chart
            const blockedDatesByMonthChartCtx = document.getElementById("blockedDatesByMonthChart").getContext("2d");
            const blockedDatesByMonthChart = new Chart(blockedDatesByMonthChartCtx, {
                type: "bar",
                data: {
                    labels: labelsBlockedDates,
                    datasets: [
                        {
                            label: "Blocked Dates Count",
                            data: dataBlockedDates,
                            backgroundColor: "rgba(75, 192, 192, 0.7)",
                        },
                    ],
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Month",
                            },
                        },
                        y: {
                            title: {
                                display: true,
                                text: "Blocked Dates Count",
                            },
                            beginAtZero: true,
                        },
                    },
                },
            });

            document.getElementById('updateBlockedBtn').addEventListener('click', function () {
                // Get the user-inputted start and end months
                const startMonthValue = document.getElementById('startMonthBlocked').value;
                const endMonthValue = document.getElementById('endMontBlocked').value;

                // Convert start and end months to Date objects
                const startDate = new Date(startMonthValue + '-01'); // First day of the start month
                const endDate = new Date(endMonthValue + '-01'); // First day of the next month after the end month
                endDate.setMonth(endDate.getMonth() + 1); // This ensures the entire end month is included

                // Filter the blocked dates array
                const filteredBlockedDates = blocked
                    .map((entry) => entry.blockedDate)
                    .filter((date) => {
                        const blockedDate = new Date(date);
                        return blockedDate >= startDate && blockedDate < endDate;
                    });

                // Group the filtered blocked dates by month
                const blockedDatesByMonth = groupBlockedDatesByMonth(filteredBlockedDates);

                // Sort the labels (year-month) and prepare the data for the chart
                const labelsBlockedDates = Object.keys(blockedDatesByMonth).sort((a, b) => new Date(a) - new Date(b));
                const dataBlockedDates = labelsBlockedDates.map(label => blockedDatesByMonth[label]);

                // Update the chart
                const blockedDatesByMonthChart = Chart.getChart("blockedDatesByMonthChart");
                blockedDatesByMonthChart.data.labels = labelsBlockedDates;
                blockedDatesByMonthChart.data.datasets[0].data = dataBlockedDates;
                blockedDatesByMonthChart.update();
            });



            // Initialize an object to store artifact counts by type
            const artifactTypeCounts = {};

            // Count artifacts by type
            artifacts.forEach((artifact) => {
                const type = artifact.type;
                if (artifactTypeCounts[type]) {
                    artifactTypeCounts[type]++;
                } else {
                    artifactTypeCounts[type] = 1;
                }
            });

            // Prepare data for the pie chart
            const labels = Object.keys(artifactTypeCounts);
            const data = Object.values(artifactTypeCounts);

            // Create the pie chart
            const artifactsByTypeChartCtx = document.getElementById("artifactsByTypeChart").getContext("2d");
            const artifactsByTypeChart = new Chart(artifactsByTypeChartCtx, {
                type: "pie",
                data: {
                    labels: labels,
                    datasets: [
                        {
                            data: data,
                            backgroundColor: [
                                "rgba(255, 99, 132, 0.7)",
                                "rgba(54, 162, 235, 0.7)",
                                "rgba(255, 206, 86, 0.7)",
                                "rgba(75, 192, 192, 0.7)",
                                "rgba(153, 102, 255, 0.7)",
                                "rgba(255, 159, 64, 0.7)",
                                "rgba(0, 128, 0, 0.7)",
                                "rgba(128, 0, 128, 0.7)",
                                // 10 additional colors
                                "rgba(255, 0, 0, 0.7)",
                                "rgba(0, 255, 0, 0.7)",
                                "rgba(0, 0, 255, 0.7)",
                                "rgba(128, 128, 0, 0.7)",
                                "rgba(255, 128, 0, 0.7)",
                                "rgba(128, 0, 255, 0.7)",
                                "rgba(0, 128, 255, 0.7)",
                                "rgba(255, 128, 128, 0.7)",
                                "rgba(128, 255, 0, 0.7)",
                                "rgba(0, 128, 128, 0.7)",
                            ],
                        },
                    ],
                },
            });

            // Initialize an object to store gender counts
            const genderCounts = {
                male: 0,
                female: 0
            };

            // Count users by gender
            users.forEach((user) => {
                // Check if the user object has a 'gender' property before accessing it
                if (user && user.gender) {
                    const gender = user.gender.toLowerCase(); // Normalize to lowercase
                    if (gender === 'male' || gender === 'female') {
                        genderCounts[gender]++;
                    }
                }
            });

            // Create the bar graph for Gender Distribution
            const genderDistributionChartCtx = document.getElementById("genderDistributionChart").getContext("2d");
            const genderDistributionChart = new Chart(genderDistributionChartCtx, {
                type: "bar",
                data: {
                    labels: ["Male", "Female"],
                    datasets: [
                        {
                            label: "Number of Users",
                            data: [genderCounts.male, genderCounts.female],
                            backgroundColor: ["rgba(75, 192, 192, 0.7)", "rgba(255, 99, 132, 0.7)"],
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });

            function printUserTypeChart() {
                printChart('User Type Distribution', 'userTypeChart');
            }

            function printUserScoreChart() {
                printChart('User Score Distribution', 'userScoreChart');
            }

            function printMonthlyReservationChart() {
                printChart('Monthly Reservation Counts per visitor', 'monthlyReservationCountChart');
            }

            function printMonthlyVisitorChart() {
                printChart('Monthly Reservation Counts', 'visitorCountChart');
            }

            function printBlockDateChart() {
                printChart('Block Date Chart', 'blockedDatesByWeekChart');
            }

            function printArtifactsChart() {
                printChart('Artifacts Chart', 'artifactsByTypeChart');
            }

            function printGenderDistributionChart() {
                printChart('Gender Distribution', 'genderDistributionChart');
            }

            // console.log('User Type Data:', userTypeData);
            // console.log('Gender Counts:', genderCounts);

            //print all chart function
            function printAllCharts() {
                const charts = [
                    { title: 'User Type Distribution', id: 'userTypeChart' },
                    { title: 'User Score Distribution', id: 'userScoreChart' },
                    { title: 'Monthly Reservation Counts per visitor', id: 'monthlyReservationCountChart' },
                    { title: 'Monthly Reservation Counts', id: 'visitorCountChart' },
                    { title: 'Block Date Chart', id: 'blockedDatesByMonthChart' },
                    { title: 'Artifacts Chart', id: 'artifactsByTypeChart' },
                    { title: 'Gender Distribution chart', id: 'genderDistributionChart' }
                ];

                const printWindow = window.open('', '_blank');

                // Create header container
                const headerDiv = printWindow.document.createElement('div');
                headerDiv.style.display = 'flex';
                headerDiv.style.justifyContent = 'center';
                headerDiv.style.flexWrap = 'wrap';
                headerDiv.style.alignItems = 'center';
                headerDiv.style.marginBottom = '20px';

                // Create and append the left image
                const leftImage = printWindow.document.createElement('img');
                leftImage.src = 'https://www.dlsud.edu.ph/images/about-logo.png';
                leftImage.alt = 'dlsud-logo';
                leftImage.style.width = '100px';
                leftImage.style.marginRight = '20px';
                headerDiv.appendChild(leftImage);

                // Create and append the center text
                const centerText = printWindow.document.createElement('div');
                centerText.style.flexGrow = '1';
                centerText.style.textAlign = 'center';

                const universityName = printWindow.document.createElement('h1');
                universityName.textContent = 'De La Salle University Dasmarinas';
                centerText.appendChild(universityName);

                const museumName = printWindow.document.createElement('h2');
                museumName.textContent = 'Museo De La Salle';
                centerText.appendChild(museumName);

                headerDiv.appendChild(centerText);

                // Create and append the right image
                const rightImage = printWindow.document.createElement('img');
                rightImage.src = 'https://culture360.asef.org/media/2011/7/Museo_De_La_Salle.jpeg';
                rightImage.alt = 'museo-logo';
                rightImage.style.width = '100px';
                rightImage.style.marginLeft = '20px';
                headerDiv.appendChild(rightImage);

                // Append header to the new window's document
                printWindow.document.body.appendChild(headerDiv);

                // Function to create an image element for each chart
                function createImageElementForChart(chartTitle, imageDataUrl) {
                    // Create a container for each chart
                    const chartContainer = printWindow.document.createElement('div');
                    chartContainer.className = 'chart-container';
                    chartContainer.style.pageBreakAfter = 'always'; // Ensure each chart is on a new page
                    chartContainer.style.textAlign = 'center'; // Center align the content

                    // Create a title element for the chart
                    const titleElement = printWindow.document.createElement('h2');
                    titleElement.textContent = chartTitle;
                    titleElement.style.fontFamily = 'Arial, sans-serif';

                    // Create an image element for the chart
                    const imageElement = printWindow.document.createElement('img');
                    imageElement.src = imageDataUrl;
                    imageElement.alt = chartTitle;
                    imageElement.style.maxWidth = '100%';
                    imageElement.style.height = 'auto';
                    imageElement.style.display = 'block'; // Display chart as a block
                    imageElement.style.margin = 'auto'; // Center the chart

                    // Append the chart title and image to the chart container
                    chartContainer.appendChild(titleElement);
                    chartContainer.appendChild(imageElement);

                    // Add Date Printed
                    const datePrinted = printWindow.document.createElement('p');
                    datePrinted.textContent = 'Date Printed: ' + new Date().toLocaleDateString();
                    datePrinted.style.marginTop = '20px'; // Add some space between the chart and the date printed
                    printWindow.document.body.appendChild(datePrinted);

                    // Append the chart container to the print window's document
                    printWindow.document.body.appendChild(chartContainer);
                }

                // Loop through each chart and create an image element for it
                charts.forEach(({ title, id }) => {
                    const canvas = document.getElementById(id);
                    const imageDataUrl = canvas.toDataURL();
                    createImageElementForChart(title, imageDataUrl);
                });

                // Introduce a delay before triggering the print function
                setTimeout(() => {
                    printWindow.print();
                }, 1000);
            }

            function printChart(chartTitle, chartId) {
                const canvas = document.getElementById(chartId);
                const imageDataUrl = canvas.toDataURL(); // Convert canvas to image data URL

                const printWindow = window.open('', '_blank');

                // Create header container
                const headerDiv = printWindow.document.createElement('div');
                headerDiv.style.display = 'flex';
                headerDiv.style.justifyContent = 'center'; // Center the content
                headerDiv.style.flexWrap = 'wrap'; // Allow items to wrap
                headerDiv.style.alignItems = 'center';
                headerDiv.style.marginBottom = '20px';

                // Create and append the left image
                const leftImage = printWindow.document.createElement('img');
                leftImage.src = 'https://www.dlsud.edu.ph/images/about-logo.png';
                leftImage.alt = 'dlsud-logo';
                leftImage.style.width = '100px'; // Adjust size as needed
                leftImage.style.marginRight = '20px'; // Add some space between the logo and the text
                headerDiv.appendChild(leftImage);

                // Create and append the center text
                const centerText = printWindow.document.createElement('div'); // Use div to allow line breaks
                centerText.style.flexGrow = '1';
                centerText.style.textAlign = 'center';

                const universityName = printWindow.document.createElement('h1');
                universityName.textContent = 'De La Salle University Dasmarinas';
                centerText.appendChild(universityName);

                const museumName = printWindow.document.createElement('h2');
                museumName.textContent = 'Museo De La Salle';
                centerText.appendChild(museumName);

                headerDiv.appendChild(centerText);

                // Create and append the right image
                const rightImage = printWindow.document.createElement('img');
                rightImage.src = 'https://culture360.asef.org/media/2011/7/Museo_De_La_Salle.jpeg';
                rightImage.alt = 'museo-logo';
                rightImage.style.width = '100px'; // Adjust size as needed
                rightImage.style.marginLeft = '20px'; // Add some space between the text and the logo
                headerDiv.appendChild(rightImage);

                // Append header to the new window's document
                printWindow.document.body.appendChild(headerDiv);

                // Create a title element for the chart
                const titleElement = printWindow.document.createElement('h2');
                titleElement.textContent = chartTitle;
                titleElement.style.fontFamily = 'Arial, sans-serif';
                titleElement.style.textAlign = 'center';

                // Create an image element for the chart
                const imageElement = printWindow.document.createElement('img');
                imageElement.src = imageDataUrl;
                imageElement.alt = chartTitle;
                imageElement.style.maxWidth = '100%';
                imageElement.style.height = 'auto';

                // Append the chart title and image to the new window's document
                printWindow.document.body.appendChild(titleElement);
                printWindow.document.body.appendChild(imageElement);

                // Add Date Printed
                const datePrinted = printWindow.document.createElement('p');
                datePrinted.textContent = 'Date Printed: ' + new Date().toLocaleDateString();
                datePrinted.style.marginTop = '20px'; // Add some space between the chart and the date printed
                printWindow.document.body.appendChild(datePrinted);

                // Style the body of the new document
                printWindow.document.body.style.textAlign = 'center';

                // Introduce a delay of 1 second (1000 milliseconds) before triggering the print function
                setTimeout(() => {
                    printWindow.print();
                }, 1000);
            }


            // Attach print functions to buttons or links
            document.getElementById('printUserTypeChartButton').addEventListener('click', printUserTypeChart);
            document.getElementById('printUserScoreChartButton').addEventListener('click', printUserScoreChart);
            document.getElementById('printMonthlyReservationChartButton').addEventListener('click', printMonthlyReservationChart);
            document.getElementById('printMonthlyVisitorsChartButton').addEventListener('click', printMonthlyVisitorChart);
            document.getElementById('printBlockDateChartButton').addEventListener('click', printBlockDateChart);
            document.getElementById('printArtifactsChartButton').addEventListener('click', printArtifactsChart);
            document.getElementById('printGenderDistributionChartButton').addEventListener('click', printGenderDistributionChart);
            document.getElementById('printAllChartsButton').addEventListener('click', printAllCharts);

            let inactivityTimeout;
            // Function to reset the inactivity timer
            function resetInactivityTimeout() {
                clearTimeout(inactivityTimeout);
                inactivityTimeout = setTimeout(() => {
                    // Send a request to the server to reset the session timeout
                    fetch("/reset-inactivity").then((response) => {
                        if (response.ok) {
                            console.log("Inactivity timer reset.");
                            // Redirect to the logout route after 1 minute of inactivity
                            window.location.href = "/logout";
                        }
                    });
                }, 300000); // 300,000 milliseconds = 5 minutes
            }
            // Listen for user interactions
            window.addEventListener("mousemove", resetInactivityTimeout);
            window.addEventListener("keydown", resetInactivityTimeout);
            // Initial reset
            resetInactivityTimeout();
        });

    </script>
</body>

</html>