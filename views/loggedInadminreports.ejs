<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <title>MuseoConnect - Admin - Reports</title>
    <meta content="" name="description">
    <meta content="" name="keywords">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700" rel="stylesheet">

    <!-- Vendor CSS Files -->
    <link href="assets/vendor/animate.css/animate.min.css" rel="stylesheet">
    <link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="assets/vendor/swiper/swiper-bundle.min.css" rel="stylesheet">

    <!-- Template Main CSS File -->
    <link href="assets/css/style.css" rel="stylesheet">

</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-default navbar-trans navbar-expand-lg fixed-top">
        <div class="container">
            <button class="navbar-toggler collapsed" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarDefault" aria-controls="navbarDefault" aria-expanded="false"
                aria-label="Toggle navigation">
                <span></span>
                <span></span>
                <span></span>
            </button>
            <a class="navbar-brand text-brand" href="/loggedInindex">Museo<span class="color-b">Connect </span>ADMIN</a>

            <div class="navbar-collapse collapse justify-content-center" id="navbarDefault">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadmin">Users</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadminreservation">Reservations</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadminblocked">Blocked</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/loggedInadminartifacts">Artifacts</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/loggedInadminreports">Reports</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link " href="/logout">Log Out</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav><!-- End Header/Navbar -->

    <main id="main">

        <!-- Report Generation -->
        <section class="intro-single">
            <div class="container">
                <div class="row">
                    <div class="col-md-12 col-lg-8">
                        <div class="title-single-box d-flex align-items-center">
                            <img src="images/reports.png" alt="Image" class="img-fluid"
                                style="max-width: 100px; max-height: 100px;">
                            <h1 class="title-single">Reports</h1>
                        </div>
                        <br>
                        <button onclick="printAllCharts()" id="printAllChartsButton">Print All Charts</button>
                    </div>

                    <div class="col-md-6 my-3">
                        <h2>User Type Distribution</h2>
                        <canvas id="userTypeChart" width="400" height="400"></canvas>
                        <button onclick="printUserTypeChart()" id="printUserTypeChartButton">Print User Type
                            Chart</button>
                    </div>

                    <!-- User Score Distribution Chart Container -->
                    <div class="col-md-6 my-3">
                        <h2>User Score Distribution</h2>
                        <canvas id="userScoreChart" width="400" height="400"></canvas>
                        <button onclick="printUserScoreChart()" id="printUserScoreChartButton">Print User Score
                            Chart</button>
                    </div>

                    <!-- Monthly Reservation Count Line Chart Container -->
                    <div class="col-md-6 my-3">
                        <h2>Monthly Reservation Counts</h2>
                        <canvas id="monthlyReservationCountChart" width="400" height="400"></canvas>
                        <button onclick="printMonthlyReservationChart()" id="printMonthlyReservationChartButton">Print
                            Monthly Reservation Chart</button>
                    </div>

                    <!-- Visitor count per month HTML body -->
                    <div class="col-md-6 my-3">
                        <h2>Monthly number of visitors per reservation</h2>
                        <canvas id="visitorCountChart" width="400" height="400"></canvas>
                        <button onclick="printMonthlyVisitorChart()" id="printMonthlyVisitorsChartButton">Print Monthly
                            Visitors Chart</button>
                    </div>

                    <!-- Blocked dates by week -->
                    <div class="col-md-6 my-3">
                        <h2>Blocked Dates by Week</h2>
                        <canvas id="blockedDatesByWeekChart" width="400" height="400"></canvas>
                        <button onclick="printBlockDateChart()" id="printBlockDateChartButton">Print Blocked Dates
                            Chart</button>
                    </div>

                    <!-- Artifacts by Type -->
                    <div class="col-md-6 my-3">
                        <h2>Artifacts by Type</h2>
                        <canvas id="artifactsByTypeChart" width="400" height="400"></canvas>
                        <button onclick="printArtifactsChart()" id="printArtifactsChartButton">Print Artifacts
                            Chart</button>
                    </div>

                </div>

            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="row">
                <div class="col-md-12">

                    <div class="copyright-footer">
                        <p class="copyright color-text-a">
                            <span class="color-a"> Â© All Rights Reserved 2023, Fergus Ampuan, Rasheed Taban, Lemuel
                                Palgan
                        </p>
                        <% if (admin && admin.name) { %>
                            <p hidden>Welcome, <%= admin.name %>
                            </p>
                            <% } else { %>
                                <p hidden>User is not logged in</p>
                                <script>
                                    // Redirect to the logout route when user.name is empty
                                    window.location.href = "/logout";
                                </script>
                                <% } %>
                    </div>
                </div>
            </div>
        </div>
    </footer><!-- End  Footer -->

    <div id="preloader"></div>
    <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
            class="bi bi-arrow-up-short"></i></a>

    <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="assets/vendor/swiper/swiper-bundle.min.js"></script>
    <script src="assets/vendor/php-email-form/validate.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.js"
        integrity="sha256-eKhayi8LEQwp4NKxN+CfCh+3qOVUtJn3QNZ0TciWLP4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/admin.js"></script>
    <script src="/js/index.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {

            // Get user data from your server-side rendering (Assuming you've already passed 'users' and 'reservations' from your route)
            const usersJSON = '<%- JSON.stringify(users) %>';
            const reservationsJSON = '<%- JSON.stringify(reservations) %>';
            const blockedJSON = '<%- JSON.stringify(blocked) %>';
            const artifactsJSON = '<%- JSON.stringify(artifacts) %>';
            const users = JSON.parse(usersJSON);
            const reservations = JSON.parse(reservationsJSON);
            const blocked = JSON.parse(blockedJSON);
            const artifacts = JSON.parse(artifactsJSON);

            // Initialize an array to store monthly reservation counts
            const monthlyReservationCounts = getMonthlyReservationCounts(reservations);

            // Initialize an array to store user scores
            const userScoreData = Array(10).fill(0);
            const userTypeData = {};

            // Extract data for charts
            users.forEach((user) => {
                // User Type Distribution
                const userType = user.type;
                userTypeData[userType] = (userTypeData[userType] || 0) + 1;

                // User Score Distribution
                const userScore = user.score;
                if (userScore !== undefined) {
                    const score = parseInt(userScore);
                    if (score >= 1 && score <= 10) {
                        userScoreData[score - 1] += 1;
                    }
                }
            });

            // Create an array to store the visitor count for each month
            const visitorCountPerMonth = new Array(12).fill(0);

            // Group the visitor data by month and count the visitors
            reservations.forEach((reservation) => {
                const visitDate = new Date(reservation.visitDate);
                const month = visitDate.getMonth(); // Months are zero-indexed (0-11)
                visitorCountPerMonth[month]++;
            });

            // Create the pie chart for User Type Distribution
            const userTypeChartCtx = document.getElementById("userTypeChart").getContext("2d");
            const userTypeChart = new Chart(userTypeChartCtx, {
                type: "pie",
                data: {
                    labels: Object.keys(userTypeData),
                    datasets: [
                        {
                            data: Object.values(userTypeData),
                            backgroundColor: [
                                "rgba(255, 99, 132, 0.7)",
                                "rgba(54, 162, 235, 0.7)",
                                "rgba(255, 206, 86, 0.7)",
                                "rgba(75, 192, 192, 0.7)",
                            ],
                        },
                    ],
                },
            });

            // Create the bar graph for User Score Distribution
            const userScoreChartCtx = document.getElementById("userScoreChart").getContext("2d");
            const userScoreChart = new Chart(userScoreChartCtx, {
                type: "bar",
                data: {
                    labels: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"], // X-axis labels
                    datasets: [
                        {
                            label: "Number of Users",
                            data: userScoreData,
                            backgroundColor: "rgba(75, 192, 192, 0.7)",
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });

            // Prepare the data for the line graph
            const monthlyReservationCountChartCtx = document.getElementById("monthlyReservationCountChart").getContext("2d");
            const monthlyReservationCountChart = new Chart(monthlyReservationCountChartCtx, {
                type: "line",
                data: {
                    labels: Object.keys(monthlyReservationCounts),
                    datasets: [
                        {
                            label: "Monthly Reservation Counts",
                            data: Object.values(monthlyReservationCounts),
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            fill: false
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });

            // Create the bar graph for Visitor Count per Month
            const visitorCountChartCtx = document.getElementById("visitorCountChart").getContext("2d");
            const visitorCountChart = new Chart(visitorCountChartCtx, {
                type: "bar",
                data: {
                    labels: [
                        "January", "February", "March", "April", "May", "June",
                        "July", "August", "September", "October", "November", "December",
                    ],
                    datasets: [
                        {
                            label: "Visitor Count",
                            data: visitorCountPerMonth,
                            backgroundColor: "rgba(75, 192, 192, 0.7)",
                        },
                    ],
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Month",
                            },
                        },
                        y: {
                            title: {
                                display: true,
                                text: "Visitor Count",
                            },
                            beginAtZero: true,
                        },
                    },
                },
            });

            function getMonthlyReservationCounts(reservations) {
                const monthlyCounts = {};

                reservations.forEach((reservation) => {
                    const visitDate = new Date(reservation.visitDate);
                    const year = visitDate.getFullYear();
                    const month = visitDate.getMonth() + 1; // Months are 0-based

                    const key = `${year}-${month}`;
                    if (monthlyCounts[key]) {
                        monthlyCounts[key]++;
                    } else {
                        monthlyCounts[key] = 1;
                    }
                });

                return monthlyCounts;
            }

            // Create an array to store the blocked dates
            const blockedDates = blocked.map((entry) => entry.blockedDate);

            // Process blocked dates and group them by week
            const blockedDatesByWeek = groupBlockedDatesByWeek(blockedDates);

            // Chart.js code to create the chart
            const blockedDatesByWeekChartCtx = document.getElementById("blockedDatesByWeekChart").getContext("2d");
            const blockedDatesByWeekChart = new Chart(blockedDatesByWeekChartCtx, {
                type: "bar",
                data: {
                    labels: Object.keys(blockedDatesByWeek), // Weeks as labels
                    datasets: [
                        {
                            label: "Blocked Dates Count",
                            data: Object.values(blockedDatesByWeek), // Count of blocked dates for each week
                            backgroundColor: "rgba(75, 192, 192, 0.7)",
                        },
                    ],
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true,
                        },
                    },
                },
            });

            // Function to group blocked dates by week
            function groupBlockedDatesByWeek(dates) {
                const blockedDatesByWeek = {};
                dates.forEach((date) => {
                    const weekStart = getWeekStartDate(date);
                    if (blockedDatesByWeek[weekStart]) {
                        blockedDatesByWeek[weekStart]++;
                    } else {
                        blockedDatesByWeek[weekStart] = 1;
                    }
                });
                return blockedDatesByWeek;
            }

            // Function to get the start date of the week for a given date
            function getWeekStartDate(date) {
                const d = new Date(date);
                const day = d.getDay();
                const diff = d.getDate() - day + (day == 0 ? -6 : 1); // Adjust for Sunday
                d.setDate(diff);
                return d.toISOString().split("T")[0]; // Return date in ISO format
            }

            // Initialize an object to store artifact counts by type
            const artifactTypeCounts = {};

            // Count artifacts by type
            artifacts.forEach((artifact) => {
                const type = artifact.type;
                if (artifactTypeCounts[type]) {
                    artifactTypeCounts[type]++;
                } else {
                    artifactTypeCounts[type] = 1;
                }
            });

            // Prepare data for the pie chart
            const labels = Object.keys(artifactTypeCounts);
            const data = Object.values(artifactTypeCounts);

            // Create the pie chart
            const artifactsByTypeChartCtx = document.getElementById("artifactsByTypeChart").getContext("2d");
            const artifactsByTypeChart = new Chart(artifactsByTypeChartCtx, {
                type: "pie",
                data: {
                    labels: labels,
                    datasets: [
                        {
                            data: data,
                            backgroundColor: [
                                "rgba(255, 99, 132, 0.7)",
                                "rgba(54, 162, 235, 0.7)",
                                "rgba(255, 206, 86, 0.7)",
                                "rgba(75, 192, 192, 0.7)",
                            ],
                        },
                    ],
                },
            });

            function printUserTypeChart() {
                printChart('User Type Distribution', 'userTypeChart');
            }

            function printUserScoreChart() {
                printChart('User Score Distribution', 'userScoreChart');
            }

            function printMonthlyReservationChart() {
                printChart('Monthly Reservation Counts per visitor', 'monthlyReservationCountChart');
            }

            function printMonthlyVisitorChart() {
                printChart('Monthly Reservation Counts', 'visitorCountChart');
            }

            function printBlockDateChart() {
                printChart('Block Date Chart', 'blockedDatesByWeekChart');
            }

            function printArtifactsChart() {
                printChart('Artifacts Chart', 'artifactsByTypeChart');
            }

            //print all chart function
            function printAllCharts() {
                const charts = [
                    { title: 'User Type Distribution', id: 'userTypeChart' },
                    { title: 'User Score Distribution', id: 'userScoreChart' },
                    { title: 'Monthly Reservation Counts per visitor', id: 'monthlyReservationCountChart' },
                    { title: 'Monthly Reservation Counts', id: 'visitorCountChart' },
                    { title: 'Block Date Chart', id: 'blockedDatesByWeekChart' },
                    { title: 'Artifacts Chart', id: 'artifactsByTypeChart' }
                ];

                // Create a canvas with a dynamic height based on the sum of individual chart heights
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                let totalHeight = 0;

                // Calculate total height without title space
                charts.forEach(({ id }) => {
                    const chartCanvas = document.getElementById(id);
                    totalHeight += chartCanvas.height;
                });

                // Add space for titles between charts
                const titleSpace = 40;
                totalHeight += (charts.length - 1) * titleSpace;

                // Set canvas dimensions
                canvas.width = 1200; // Adjust as needed
                canvas.height = totalHeight; // Adjust as needed

                // Variables to track the current Y coordinate
                let currentY = 0;

                // Draw each chart on the combined canvas
                charts.forEach(({ title, id }) => {
                    const chartCanvas = document.getElementById(id);

                    // Add space for the title
                    ctx.font = '18px Arial';
                    ctx.fillStyle = '#000';
                    ctx.fillText(title, 10, currentY + 20); // Adjust the position as needed

                    // Draw the chart below the title
                    ctx.drawImage(chartCanvas, 0, currentY + 30); // Adjust the position as needed

                    // Add space between charts
                    currentY += chartCanvas.height + titleSpace;
                });

                // Open a new window with the combined canvas
                const printWindow = window.open('', '_blank');
                printWindow.document.write(`<h2>All Charts</h2><img src="${canvas.toDataURL()}" alt="All Charts">`);

                // Introduce a delay before triggering the print function
                setTimeout(() => {
                    printWindow.print();
                }, 1000);
            }

            function printChart(chartTitle, chartId) {
                const canvas = document.getElementById(chartId);
                const imageDataUrl = canvas.toDataURL(); // Convert canvas to image data URL

                const printWindow = window.open('', '_blank');
                printWindow.document.write(`<h2>${chartTitle}</h2><img src="${imageDataUrl}" alt="${chartTitle}">`);

                // Introduce a delay of 1 second (1000 milliseconds) before triggering the print function
                setTimeout(() => {
                    printWindow.print();
                }, 1000);
            }

            // Attach print functions to buttons or links
            document.getElementById('printUserTypeChartButton').addEventListener('click', printUserTypeChart);
            document.getElementById('printUserScoreChartButton').addEventListener('click', printUserScoreChart);
            document.getElementById('printMonthlyReservationChartButton').addEventListener('click', printMonthlyReservationChart);
            document.getElementById('printMonthlyVisitorsChartButton').addEventListener('click', printMonthlyVisitorChart);
            document.getElementById('printBlockDateChartButton').addEventListener('click', printBlockDateChart);
            document.getElementById('printArtifactsChartButton').addEventListener('click', printArtifactsChart);
            document.getElementById('printAllChartsButton').addEventListener('click', printAllCharts);
        });

    </script>
</body>

</html>