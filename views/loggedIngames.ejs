<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title>MuseoConnect - Games</title>
  <meta content="" name="description">
  <meta content="" name="keywords">

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700" rel="stylesheet">

  <link href="assets/vendor/animate.css/animate.min.css" rel="stylesheet">
  <link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
  <link href="assets/vendor/swiper/swiper-bundle.min.css" rel="stylesheet">
  <link href="images/MuseoDeLaSalle.png" type="image/jpeg" rel="icon">

  <!-- Template Main CSS File -->
  <link href="assets/css/style.css" rel="stylesheet">

  <style>
    .quiz-card {
      background-color: #f8f9fa;
      border-radius: 15px;
      box-shadow: 10px 10px 10px rgba(45, 192, 16, 0.13);
      padding: 30px;
      /* Increase padding for a larger card */
      border: 2px solid #28a745;
      /* Set border color to success color */
    }

    .quiz-title {
      font-size: 40px;
      /* Increase font size for the title */
      font-weight: bold;
      color: #000000;
      margin-bottom: 30px;
      /* Increase margin for spacing */
      text-align: center;
    }

    .quiz-question {
      font-size: 24px;
      /* Increase font size for the question */
      color: #495057;
      margin-bottom: 20px;
      /* Increase margin for spacing */
    }

    .quiz-options {
      list-style-type: none;
      padding: 0;
      display: flex;
      flex-direction: column;
      margin: 0;
    }

    .quiz-options li {
      margin-bottom: 15px;
      /* Increase margin between options */
    }

    .quiz-options label {
      display: inline-block;
      cursor: pointer;
      border: 2px solid #28a745;
      background-color: #fff;
      color: #000000;
      padding: 20px;
      /* Increase padding for larger buttons */
      border-radius: 8px;
      /* Increase border radius for rounded corners */
      transition: background-color 0.3s ease, color 0.3s ease;
      width: 100%;
      text-align: left;
      /* Align text to the left */
      font-size: 18px;
      /* Increase font size for the options */
    }

    .quiz-options input[type="radio"] {
      display: none;
    }

    .quiz-options input[type="radio"]:checked+label {
      background-color: #0056b3;
      color: #fff;
    }

    .quiz-btn {
      margin-top: 30px;
      /* Increase margin for spacing */
      background-color: #28a745;
      color: #fff;
      border: none;
      border-radius: 8px;
      padding: 20px;
      /* Increase padding for a larger button */
      font-size: 20px;
      /* Increase font size for the button */
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .quiz-btn:hover {
      background-color: #218838;
    }

    .quiz-options label:hover {
      background-color: #28a745;
      color: #fff;
    }

    .quiz-options input[type="radio"]:checked+label {
      background-color: #28a745;
      color: #fff;
    }

    .quiz-progress {
      font-size: 18px;
      text-align: center;
      margin-top: 15px;
      color: #28a745;
      /* Change color to your preference */
    }
  </style>
</head>

<body>
  <!-- Navbar -->
  <nav class="navbar navbar-default navbar-trans navbar-expand-lg fixed-top">
    <div class="container">
      <button class="navbar-toggler collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#navbarDefault"
        aria-controls="navbarDefault" aria-expanded="false" aria-label="Toggle navigation">
        <span></span>
        <span></span>
        <span></span>
      </button>
      <a class="navbar-brand text-brand" href="/loggedInindex">Museo<span class="color-b">Connect</span></a>

      <div class="navbar-collapse collapse justify-content-center" id="navbarDefault">
        <ul class="navbar-nav">

          <li class="nav-item">
            <a class="nav-link" href="/loggedInindex">Home</a>
          </li>

          <li class="nav-item">
            <a class="nav-link " href="/loggedInaboutUs">About us</a>
          </li>

          <li class="nav-item">
            <a class="nav-link" href="/loggedIndonation">Donation</a>
          </li>

          <li class="nav-item">
            <a class="nav-link" href="/loggedInartifacts">Artifacts</a>
          </li>

          <li class="nav-item">
            <a class="nav-link" href="/loggedInvirtualTour">Virtual Tour</a>
          </li>

          <li class="nav-item">
            <a class="nav-link active" href="/loggedIngames">Games</a>
          </li>

          <li class="nav-item">
            <a class="nav-link " href="/loggedInreservation">Reservation</a>
          </li>

          <li class="nav-item">
            <a class="nav-link " href="/loggedInevaluation">Evaluation</a>
          </li>

          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown"
              aria-haspopup="true" aria-expanded="false">Account</a>
            <div class="dropdown-menu">
              <a class="dropdown-item " href="/loggedInaccountInformation">Account Information</a>
              <a class="dropdown-item " href="/logout">Log Out</a>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </nav><!-- End Header/Navbar -->
  <br><br><br><br><br><br><br><br><br>

  <div id="quiz-container" class="quiz-card">
    <p id="user-score">User Score: <%= user.score %>
    </p>
    <% quizQuestions.forEach((question, index)=> { %>
      <div class="quiz-question" data-question-index="<%= index %>" data-question-id="<%= question.id %>">
        <h3 class="quiz-title">
          <%= question.question %>
        </h3>
        <% if (question.options) { %>
          <ul class="quiz-options">
            <% question.options.forEach(option=> { %>
              <li>
                <label>
                  <input type="radio" name="question_<%= index %>"
                    onclick="selectOption('<%= option %>', '<%= question.correctAnswer %>')">
                  <%= option %>
                </label>
              </li>
              <% }); %>
          </ul>
          <% } else { %>
            <input type="text" id="input-answer-<%= index %>" class="form-control" placeholder="Your answer">
            <button class="quiz-btn" onclick="submitInputAnswer('<%= question.correctAnswer %>')">Submit</button>
            <% } %>
              <div class="correct-answer" style="display:none;">
                Correct Answer: <span class="answer-text"></span>
              </div>
      </div>
      <% }); %>
        <button class="quiz-btn" onclick="showNextQuestion()">Next Question</button>
  </div>


  </main>
  <br><br><br><br><br><br><br><br><br>


  <!-- Footer -->
  <footer>

  </footer><!-- End  Footer -->


  <div id="preloader"></div>
  <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i
      class="bi bi-arrow-up-short"></i></a>

  <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="assets/vendor/swiper/swiper-bundle.min.js"></script>
  <script src="assets/vendor/php-email-form/validate.js"></script>

  <script src="/js/index.js"></script>

  <script>
    let currentQuestionIndex = 0;

    function selectOption(selectedOption, correctAnswer) {
      const questionDiv = document.querySelector(`.quiz-question[data-question-index="${currentQuestionIndex}"]`);
      questionDiv.querySelector('.answer-text').innerText = correctAnswer;
      questionDiv.querySelector('.correct-answer').style.display = 'block';
    }

    function submitInputAnswer(correctAnswer) {
      const questionDiv = document.querySelector(`.quiz-question[data-question-index="${currentQuestionIndex}"]`);
      questionDiv.querySelector('.answer-text').innerText = correctAnswer;
      questionDiv.querySelector('.correct-answer').style.display = 'block';
    }

    function showNextQuestion() {
      const totalQuestionsString = "<%= quizQuestions.length %>";
      const totalQuestions = parseInt(totalQuestionsString, 10);
      const currentQuestionDiv = document.querySelector(`.quiz-question[data-question-index="${currentQuestionIndex}"]`);
      currentQuestionDiv.style.display = 'none';
      currentQuestionIndex++;

      if (currentQuestionIndex < totalQuestions) {
        const nextQuestionDiv = document.querySelector(`.quiz-question[data-question-index="${currentQuestionIndex}"]`);
        nextQuestionDiv.style.display = 'block';
      } else {
        // Handle end of the quiz
        alert("End of the quiz!");
        window.location.href = "/loggedIngames"; // Redirect to the game start page
      }
    }


    const updatedScore = calculateUpdatedScore(); // You need to implement this function
    fetch(`/loggedIn/admin/users/<%= user._id %>/score`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ score: updatedScore }), // Update the score as needed
    })
      .then((response) => {
        if (response.ok) {
          // Score updated successfully, you can handle this accordingly
          // Update the displayed score on the webpage
          const userScoreElement = document.getElementById('user-score');
          userScoreElement.innerText = `User Score: ${updatedScore}`;
        } else {
          // Handle errors if necessary
        }
      })
      .catch((error) => {
        console.error('Error updating score:', error);
        // Handle errors if necessary
      });


    // Initially show the first question
    document.querySelector('.quiz-question[data-question-index="0"]').style.display = 'block';



    // Initially show the first question
    document.querySelector('.quiz-question[data-question-index="0"]').style.display = 'block';

    let inactivityTimeout;

    // Function to reset the inactivity timer
    function resetInactivityTimeout() {
      clearTimeout(inactivityTimeout);
      inactivityTimeout = setTimeout(() => {
        // Send a request to the server to reset the session timeout
        fetch("/reset-inactivity").then((response) => {
          if (response.ok) {
            console.log("Inactivity timer reset.");
            // Redirect to the logout route after 1 minute of inactivity
            window.location.href = "/logout";
          }
        });
      }, 300000); // 300,000 milliseconds = 5 minutes
    }

    // Listen for user interactions
    window.addEventListener("mousemove", resetInactivityTimeout);
    window.addEventListener("keydown", resetInactivityTimeout);

    // Initial reset
    resetInactivityTimeout(); 
  </script>

</body>

</html>